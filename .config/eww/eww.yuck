
;; Weather Polls
(defpoll weather-icon :interval "1s"  "cat /tmp/xmonad/weather/weather-icon")
(defpoll temperature :interval "1s"  "cat /tmp/xmonad/weather/weather-degree")
(defpoll weather-hex :interval "1s"  "cat /tmp/xmonad/weather/weather-hex")
(defpoll weather-quote :interval "1s"  "~/.config/eww/scripts/getwethquote")
(defpoll weather-quote2 :interval "1s"  "~/.config/eww/scripts/getwethquote2")
(defpoll weather-stat :interval "1s"  "cat /tmp/xmonad/weather/weather-stat")
(defpoll getweather :interval "6h" "~/.config/eww/scripts/getweather > /dev/null")

;; Time Polls
(defpoll time-hour :interval "10s"  "date \"+%H\"")
(defpoll time-minute :interval "1s" "date \"+%M\"")
(defpoll time-second :interval "1s" "date \"+%S\"")
(defpoll time-colon :interval "1s" "date \"+%S\" | awk '{print $1 % 2 == 0 ? \"full\" : \"light\"}'")


;; Date Polls
(defpoll date-day :interval "10s" "date \"+%a\"")
(defpoll date-prevday :interval "10s" "date -d \"yesterday\" \"+%a\"")
(defpoll date-nextday :interval "10s" "date -d \"tomorrow\" \"+%a\"")
(defpoll date-date :interval "10s" "date \"+%d\"")
(defpoll date-month :interval "10s" "date \"+%b\"")




(defwidget clock-widget []
  (box :orientation "h" :space-evenly "true"
    (box :orientation "h" :class "clock" :space-evenly "true"
      (box :class "hour" {time-hour})
      (box :orientation "v" :class "second-container" :space-evenly "true"
        (box :class "prev-second" "")
        (box :class "second" {time-second+1})
        (box :class "next-second" "")
      )
      (box :class "minute" {time-minute})
    )
  )
)

(defwidget calendar-widget []
  (box :orientation "v" :class "day" 
    (box :orientation "h" :class "day" :space-evenly "true"
      (box :class "prev-day" {date-prevday})
      (box :class "spacer" "")
      (box :class "spacer" "")
    )
    (box :orientation "h" :class "day" :space-evenly "true"
      (box :class "day" {date-day})
      (box :class "date" {date-date})
      (box :class "month" {date-month})
    )
    (box :orientation "h" :class "day" :space-evenly "true"
      (box :class "next-day" {date-nextday})
      (box :class "spacer" "")
      (box :class "spacer" "") 
    )
  )
)

(defwidget weather [] 
  (box :orientation "v" :space-evenly "false" 
   (box :orientation "h" :space-evenly "true" 
    (box :class "weather-icon" {weather-icon})
    (box :class "weather-stat" {weather-stat})
    (box :class "temperature" "${temperature}  ï‹ˆ")
   )
   (box :orientation "v" :space-evenly "false" 
    (box :class "weather-quote-head" {weather-quote})
    (box :class "weather-quote-tail" {getweather})
    (box :class "weather-quote" {weather-quote2})
   )
  )
)



(defwindow clock
  :geometry (geometry 
                  :x "15px" 
                  :y "360" ;; + 200
                  :width "730px"
                  :height "180px"
            )
    :monitor 1 
    :stacking "bg"
    (clock-widget)
)

(defwindow calendar
  :geometry (geometry 
                  :x "15px" 
                  :y "560" ;; + 150
                  :width "730"
                  :height "120px"
            )
    :monitor 1 
    :stacking "bg"
    (calendar-widget)
)

(defwindow weather
  :geometry (geometry 
                  :x "15px" 
                  :y "710" 
                  :width "730"
                  :height "230px"
            )
    :monitor 1 
    :stacking "bg"
    (weather)
)

